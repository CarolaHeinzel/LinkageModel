from scipy.optimize import minimize
import numpy as np
from scipy.stats import dirichlet, binom
from scipy.stats import norm
#%%
# Estimator for the IAs
def get_admixture_proportions(x, p, tol=1e-6):
    K, M = p.shape
    res = dirichlet.rvs(alpha=np.ones(K))
    err = 1
    while err > tol:
        loc = fun2(res, p, x)
        err = np.sum(np.abs(res - loc))
        res = loc
    return res

def fun2(q, p, loc_x):
    K, M = p.shape
    E = np.zeros((K, M))
    loc = np.dot(q, p)
    loc[loc==0] = 1e-16
    loc[loc==1] = 1-1e-16
    for k in range(K):
        E[k, :] = (loc_x * p[k, :] / loc + (2 - loc_x) * (1 - p[k, :]) / (1 - loc))
    res = np.sum(E, axis=1) / M * q / 2
    return res / np.sum(res)

# Create Data
def create_sample_pbekannt(M,  K, p, q):
    x = np.zeros(M)

    loc = np.dot(q, p)
    #print(loc)
    for m in range(M):
        #print(x[m])
        #print( binom.rvs(n=2, p=loc[m]))
        x[m] = binom.rvs(n=1, p=loc[m])
    return x
# Simulate Allele Frequencies
#print(create_sample_pbekannt(10,  K, p, [0.2, 0.8, 0]))
#%%
def create_p(M, K):
    return np.random.uniform(0, 1, size=(K, M))

#p = create_p(10,3)
#res = create_sample_pbekannt(10, 1, 3, p, 0.5, 0)
#print(res)
#%%
M = 100
K = 2
N = 1
p = create_p(M, K)
x = create_sample_pbekannt(M,  K, p, [0.2, 0.8])
X1 = [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]
X2 =  [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 

p = [
    [9.99247424e-01, 7.52575925e-04],
    [1.78807259e-01, 8.21192741e-01],
    [9.67883966e-01, 3.21160340e-02],
    [9.88417017e-01, 1.15829831e-02],
    [9.82042858e-01, 1.79571416e-02],
    [3.91209460e-01, 6.08790540e-01],
    [9.99999973e-01, 2.67613802e-08],
    [9.96054975e-01, 3.94502528e-03],
    [1.28798400e-02, 9.87120160e-01],
    [8.57819318e-01, 1.42180682e-01],
    [9.81796607e-07, 9.99999018e-01],
    [5.67228150e-07, 9.99999433e-01],
    [3.34938602e-01, 6.65061398e-01],
    [9.29853618e-01, 7.01463815e-02],
    [4.01151936e-01, 5.98848064e-01],
    [9.92141906e-01, 7.85809376e-03],
    [9.99039393e-01, 9.60606663e-04],
    [9.59323467e-05, 9.99904068e-01],
    [5.92686706e-02, 9.40731329e-01],
    [8.95886308e-01, 1.04113692e-01],
    [9.71248238e-01, 2.87517617e-02],
    [5.34985642e-02, 9.46501436e-01],
    [3.02863669e-01, 6.97136331e-01],
    [8.59173600e-01, 1.40826400e-01],
    [7.78162236e-01, 2.21837764e-01],
    [4.93934185e-01, 5.06065815e-01],
    [4.36126054e-01, 5.63873946e-01],
    [3.98759589e-01, 6.01240411e-01],
    [7.36392621e-04, 9.99263607e-01],
    [2.77323969e-01, 7.22676031e-01],
    [1.84178793e-02, 9.81582121e-01],
    [2.45379168e-04, 9.99754621e-01],
    [5.68433251e-01, 4.31566749e-01],
    [2.15578288e-03, 9.97844217e-01],
    [1.55223940e-01, 8.44776060e-01],
    [5.72400627e-01, 4.27599373e-01],
    [3.27556477e-02, 9.67244352e-01],
    [1.08737419e-03, 9.98912626e-01],
    [1.35531085e-02, 9.86446891e-01],
    [9.99948422e-01, 5.15784750e-05],
    [6.88426095e-01, 3.11573905e-01],
    [7.66490480e-01, 2.33509520e-01],
    [7.21167811e-01, 2.78832189e-01],
    [6.10115949e-03, 9.93898841e-01],
    [2.34032323e-02, 9.76596768e-01],
    [9.76118139e-01, 2.38818606e-02],
    [2.79052802e-01, 7.20947198e-01],
    [4.75594007e-01, 5.24405993e-01],
    [9.98304835e-01, 1.69516460e-03],
    [9.99811056e-01, 1.88943972e-04],
    [4.36086648e-01, 5.63913352e-01],
    [6.32343647e-01, 3.67656353e-01],
    [9.99984189e-01, 1.58107925e-05],
    [8.26538251e-04, 9.99173462e-01],
    [5.50819882e-01, 4.49180118e-01],
    [9.99773033e-01, 2.26966551e-04],
    [6.50146636e-01, 3.49853364e-01],
    [9.99999747e-01, 2.52971072e-07],
    [4.73507807e-01, 5.26492193e-01],
    [7.25285004e-01, 2.74714996e-01],
    [9.97899150e-01, 2.10084987e-03],
    [9.93198519e-01, 6.80148094e-03],
    [4.94541188e-03, 9.95054588e-01],
    [9.86203317e-01, 1.37966832e-02],
    [9.86016444e-01, 1.39835559e-02],
    [2.96857383e-01, 7.03142617e-01],
    [2.88961638e-01, 7.11038362e-01],
    [1.23469722e-01, 8.76530278e-01],
    [2.35753958e-03, 9.97642460e-01],
    [4.49509236e-02, 9.55049076e-01],
    [9.84061811e-01, 1.59381886e-02],
    [9.41156622e-01, 5.88433780e-02],
    [3.42468770e-04, 9.99657531e-01],
    [3.24467382e-01, 6.75532618e-01],
    [1.08616908e-04, 9.99891383e-01],
    [2.62362982e-03, 9.97376370e-01],
    [9.94981810e-01, 5.01819028e-03],
    [9.12195809e-01, 8.78041908e-02],
    [1.36263871e-02, 9.86373613e-01],
    [6.78461379e-02, 9.32153862e-01],
    [9.88299011e-01, 1.17009893e-02],
    [2.94955537e-01, 7.05044463e-01],
    [9.99931709e-01, 6.82909836e-05],
    [2.44997055e-01, 7.55002945e-01],
    [5.22470302e-02, 9.47752970e-01],
    [6.04214184e-01, 3.95785816e-01],
    [9.67449979e-01, 3.25500210e-02],
    [8.98523591e-01, 1.01476409e-01],
    [9.98084343e-01, 1.91565722e-03],
    [7.93550824e-02, 9.20644918e-01],
    [9.99993687e-01, 6.31345090e-06],
    [9.99682977e-01, 3.17022773e-04],
    [9.98737542e-01, 1.26245822e-03],
    [9.49409654e-01, 5.05903461e-02],
    [5.54302906e-03, 9.94456971e-01],
    [1.65469632e-01, 8.34530368e-01],
    [4.24165305e-01, 5.75834695e-01],
    [2.20233771e-01, 7.79766229e-01],
    [2.27156383e-01, 7.72843617e-01],
    [5.76999091e-05, 9.99942300e-01]
]
     
X = np.array(X1) + np.array(X2)
print(get_admixture_proportions(X, np.array(p).T))
